import chess
import chess.engine
import sys
import RPi.GPIO as GPIO
import actautor_output_testfxn as actuator
# import input_sensor_testfxn as sensor
# import led_test_fxn as led
import time
import re
# Multiplexer Pins
select_pins = [10, 9, 11, 8]            #change to BCM pin numbering
enab_pins = [17, 27, 22, 23]
output_pin = 25                         

capture_dest = "j1"
# --- UCI Input ---
def get_uci_move():
    uci_pattern = re.compile(r"^[a-h][1-8][a-h][1-8]$")
    move = input("Enter a move in UCI format (e.g., e2e4): ").strip().lower()
    if move == "quit" : return move
    else:
        return move if uci_pattern.match(move) else None

"""
select_pins = [19, 21, 23, 24]
âœ… Fix: If you're not using SPI, you can still use them as GPIOs.

Disable SPI by running:

in sh terminal
sudo raspi-config

Go to Interface Options â†’ SPI â†’ Disable.

Reboot the Raspberry Pi.
"""


# Initialize sensor module
# Input = sensor.ChessInputHandler(select_pins, enab_pins, output_pin)

def main():
    global capture_dest
    actuator.initialise()
    # Correct Stockfish Path for Raspberry Pi
    STOCKFISH_PATH = "/usr/games/stockfish"
    
    try:
        engine = chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH)
        engine.configure({"Skill Level": 1})
    except Exception as e:
        print("Error starting Stockfish:", e)
        sys.exit(1)

    board = chess.Board()
    print("Welcome to Chess with Stockfish!")
    print("Move a piece using the chessboard sensors.")
    print("Type 'quit' to exit.\n")

    while not board.is_game_over():
        print(board, "\n")
        
        if board.turn == chess.WHITE:

#             led.check_warning(board)
            print("Waiting for your move...")

            try:
                move_uci = get_uci_move()
                if move_uci == "quit" :
                    break
                move = chess.Move.from_uci(move_uci)
                print(move)
                if move in board.legal_moves:
                    
                    print(f"Your move: {move.uci()}")
                    
                    if board.piece_at(move.from_square).piece_type == chess.KNIGHT:
                        actuator.move_piece_with_stepper(move_uci, special = True)
                    # Highlight move on LED board
                    #led.update_board_display(move)  already done in the input senso                        
                    elif board.is_kingside_castling(move):
                        actuator.castle_move(move_uci, "kingside")

                    elif board.is_queenside_castling(move):
                        actuator.castle_move(move_uci, "queenside")
                        
                    else: actuator.move_piece_with_stepper(move_uci)
                    board.push(move)
                    # Move piece using actuators
                    # actuator.move_piece(move.from_square, move.to_square)  no need to move piece when player is moving
                else:
                    print("Illegal move detected! Try again.")
                    continue
            except Exception as e:
                print(f"Invalid move detected! Try again.: {e}")
                continue

        else:
            # Stockfish's move
            print("Stockfish is thinking...\n")
            result = engine.play(board, chess.engine.Limit(time=0.1))
            print("Stockfish plays:", result.move.uci(), "\n")
            move = result.move
            move_uci = result.move.uci()
            if board.piece_at(move.from_square).piece_type == chess.KNIGHT:
                actuator.move_piece_with_stepper(move_uci, special = True)
            # Highlight move on LED board
            #led.update_board_display(move)  already done in the input sensor
            elif board.is_kingside_castling(move):
                actuator.castle_move(move_uci, "kingside")

            elif board.is_queenside_castling(move):
                actuator.castle_move(move_uci, "queenside")
    # Show Stockfish's move on LEDs
#             led.ai_move_display(result.move)
            else: actuator.move_piece_with_stepper(result.move.uci())
            board.push(move)
            time.sleep(0.5)
#             Input.save_current_state_as_previous()

#     led.checkmate_warning(board)
    print("Game over!")
    print("Result:", board.result())
    engine.quit()

if name == "main":
    main()
